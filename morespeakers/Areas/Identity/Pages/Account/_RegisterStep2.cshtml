@model RegisterModel

<div class="form-step" data-step="2">
    @if (ViewData["HasValidationErrors"] as bool? == true)
    {
        <div class="alert alert-danger mb-3">
            <i class="bi bi-exclamation-triangle me-2"></i>@ViewData["ValidationMessage"]
        </div>
    }
    @if (ViewData["SuccessMessage"] != null)
    {
        <div class="alert alert-success mb-3">
            <i class="bi bi-check-circle me-2"></i>@ViewData["SuccessMessage"]
        </div>
    }
    <h5 class="mb-4">Your Speaker Profile</h5>

    <div class="mb-3">
        <label asp-for="Input.SpeakerTypeId" class="form-label fw-medium">Speaker Type</label>
        <div class="row">
            @foreach (var speakerType in Model.SpeakerTypes)
            {
                <div class="col-md-6 mb-3">
                    <div class="card speaker-type-card @(Model.Input.SpeakerTypeId == speakerType.Id ? "selected" : "")" 
                         style="cursor: pointer; transition: all 0.2s ease-in-out;">
                        <div class="card-body text-center">
                            <input type="radio" asp-for="Input.SpeakerTypeId" value="@speakerType.Id"
                                   class="d-none speaker-type-radio" id="speakerType@(speakerType.Id)"
                                   checked="@(Model.Input.SpeakerTypeId == speakerType.Id)" />
                            <label for="speakerType@(speakerType.Id)" class="w-100 m-0" style="cursor: pointer;">
                                <i class="bi @(speakerType.Id == 1 ? "bi-person-plus" : "bi-award") display-6 mb-3 d-block speaker-type-icon"></i>
                                <h6 class="fw-bold mb-2">@(speakerType.Id == 1 ? "New Speaker" : "Experienced Speaker")</h6>
                                <p class="small text-muted mb-0">@speakerType.Description</p>
                            </label>
                        </div>
                    </div>
                </div>
            }
        </div>
        <span asp-validation-for="Input.SpeakerTypeId" class="text-danger small"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Input.Bio" class="form-label fw-medium">Bio</label>
        <textarea asp-for="Input.Bio" class="form-control" rows="4"
                  placeholder="Tell us about yourself, your speaking experience, and what makes you passionate about sharing knowledge..."></textarea>
        <span asp-validation-for="Input.Bio" class="text-danger small"></span>
        <div class="form-text">
            <small class="text-muted">This will be displayed on your public profile.</small>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="Input.Goals" class="form-label fw-medium">Goals</label>
        <textarea asp-for="Input.Goals" class="form-control" rows="3"
                  placeholder="What are your speaking goals? What do you hope to achieve through mentorship?"></textarea>
        <span asp-validation-for="Input.Goals" class="text-danger small"></span>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label asp-for="Input.SessionizeUrl" class="form-label fw-medium">Sessionize Profile URL</label>
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-link text-muted"></i>
                </span>
                <input asp-for="Input.SessionizeUrl" class="form-control border-start-0"
                       placeholder="https://sessionize.com/your-profile"/>
            </div>
            <span asp-validation-for="Input.SessionizeUrl" class="text-danger small"></span>
            <div class="form-text">
                <small class="text-muted">Optional: Link to your Sessionize speaker profile</small>
            </div>
        </div>

        <div class="col-md-6 mb-3">
            <label asp-for="Input.HeadshotUrl" class="form-label fw-medium">Headshot URL</label>
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-image text-muted"></i>
                </span>
                <input asp-for="Input.HeadshotUrl" class="form-control border-start-0"
                       placeholder="https://example.com/your-photo.jpg"/>
            </div>
            <span asp-validation-for="Input.HeadshotUrl" class="text-danger small"></span>
            <div class="form-text">
                <small class="text-muted">Optional: Direct link to your profile photo</small>
            </div>
        </div>
    </div>
</div>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        console.log('Speaker type selection script loaded');
        
        // Update selection state
        function updateSelection(selectedCard) {
            console.log('Updating selection for card:', selectedCard);
            
            // Remove selected class from all cards
            document.querySelectorAll('.speaker-type-card').forEach(card => {
                card.classList.remove('selected');
                console.log('Removed selected class from card');
            });
            
            // Add selected class to the clicked card
            selectedCard.classList.add('selected');
            console.log('Added selected class to selected card');
            
            // Check the corresponding radio button
            const radio = selectedCard.querySelector('input[type="radio"]');
            if (radio) {
                radio.checked = true;
                console.log('Checked radio button:', radio.value);
                
                // Trigger change event for any form validation or other listeners
                radio.dispatchEvent(new Event('change', { bubbles: true }));
            }
        }

        // Initialize selection based on any pre-checked radio
        function initializeSelection() {
            console.log('Initializing selection');
            document.querySelectorAll('.speaker-type-card').forEach(card => {
                const radio = card.querySelector('input[type="radio"]');
                if (radio && radio.checked) {
                    card.classList.add('selected');
                    console.log('Found pre-selected card and added selected class');
                }
            });
        }

        // Initialize on page load
        initializeSelection();

        // Add event listeners to cards
        document.querySelectorAll('.speaker-type-card').forEach((card, index) => {
            console.log('Adding listeners to card', index);
            
            // Handle card clicks
            card.addEventListener('click', function (e) {
                console.log('Card clicked:', this);
                e.preventDefault();
                e.stopPropagation();
                updateSelection(this);
            });

            // Handle mousedown for immediate feedback
            card.addEventListener('mousedown', function (e) {
                console.log('Card mousedown:', this);
                e.preventDefault();
                updateSelection(this);
            });
            
            // Handle label clicks
            const label = card.querySelector('label');
            if (label) {
                label.addEventListener('click', function (e) {
                    console.log('Label clicked');
                    e.preventDefault();
                    e.stopPropagation();
                    updateSelection(card);
                });
            }

            // Handle radio button changes (for keyboard navigation)
            const radio = card.querySelector('input[type="radio"]');
            if (radio) {
                radio.addEventListener('change', function (e) {
                    console.log('Radio changed:', this.checked);
                    if (this.checked) {
                        updateSelection(card);
                    }
                });
            }
        });

        // Debug: Log current state periodically
        setInterval(() => {
            const selectedCards = document.querySelectorAll('.speaker-type-card.selected');
            const checkedRadios = document.querySelectorAll('.speaker-type-radio:checked');
            console.log('Selected cards:', selectedCards.length, 'Checked radios:', checkedRadios.length);
        }, 2000);
    });
</script>