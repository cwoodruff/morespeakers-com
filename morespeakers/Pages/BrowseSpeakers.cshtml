@page
@model morespeakers.Pages.BrowseSpeakersModel
@{
    ViewData["Title"] = "Browse Speakers";
}

<div class="container"
     _="on htmx:beforeRequest show #loading
        on htmx:afterRequest hide #loading
        on htmx:afterSwap
            if event.detail.target.id.startsWith('mentorship-status-') then
                if event.detail.xhr.responseText.includes('success') then
                    put '<div class=&quot;alert alert-success alert-sm&quot;>Mentorship request sent!</div>' into event.detail.target
                else if event.detail.xhr.responseText.includes('error') then
                    put '<div class=&quot;alert alert-danger alert-sm&quot;>Unable to send request. Please try again.</div>' into event.detail.target">
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="bi bi-people me-2"></i>
            Browse Speakers
        </h1>
        <p class="lead text-muted">Discover speakers in the technology community and connect with mentors or new
            speakers.</p>
    </div>
</div>

<!-- Search and Filter Section -->
<div class="search-filters">
    <form method="get" hx-get="/BrowseSpeakers" hx-target="#speakers-container" hx-indicator="#loading">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="searchTerm" class="form-label">Search</label>
                <div class="input-group">
                    <input type="text"
                           id="searchTerm"
                           name="searchTerm"
                           value="@Model.SearchTerm"
                           class="form-control"
                           placeholder="Search by name, bio, or expertise..."
                           _="on input debounced at 500ms trigger submit on closest form">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label for="speakerTypeFilter" class="form-label">Speaker Type</label>
                <select id="speakerTypeFilter" name="speakerTypeFilter" class="form-select"
                        _="on change trigger submit on closest form">
                    <option value="">All Speakers</option>
                    <option value="1" selected="@(Model.SpeakerTypeFilter == 1)">New Speakers</option>
                    <option value="2" selected="@(Model.SpeakerTypeFilter == 2)">Experienced Speakers</option>
                </select>
            </div>
            <div class="col-md-3 mb-3">
                <label for="expertiseFilter" class="form-label">Expertise Area</label>
                <select id="expertiseFilter" name="expertiseFilter" class="form-select"
                        _="on change trigger submit on closest form">
                    <option value="">All Expertise</option>
                    @foreach (var expertise in Model.AllExpertise)
                    {
                        <option value="@expertise.Id" selected="@(Model.ExpertiseFilter == expertise.Id)">
                            @expertise.Name
                        </option>
                    }
                </select>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center flex-wrap">
                    <div class="mb-2">
                        <strong>@Model.TotalCount</strong> speaker(s) found
                        @if (!string.IsNullOrEmpty(Model.SearchTerm) || Model.SpeakerTypeFilter.HasValue || Model.ExpertiseFilter.HasValue)
                        {
                            <a href="/BrowseSpeakers" class="btn btn-outline-secondary btn-sm ms-2">
                                <i class="bi bi-x-circle"></i> Clear Filters
                            </a>
                        }
                    </div>
                    <div class="mb-2">
                        <label for="sortBy" class="form-label me-2">Sort by:</label>
                        <select id="sortBy" name="sortBy" class="form-select d-inline-block w-auto"
                                _="on change trigger submit on closest form">
                            <option value="name" selected="@(Model.SortBy == "name")">Name</option>
                            <option value="newest" selected="@(Model.SortBy == "newest")">Newest First</option>
                            <option value="expertise" selected="@(Model.SortBy == "expertise")">Most Expertise</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Loading Indicator -->
<div id="loading" class="text-center my-4" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2 text-muted">Searching speakers...</p>
</div>

<!-- Speakers Grid -->
<div id="speakers-container">
    @await Html.PartialAsync("_SpeakersContainer", Model)
</div>

</div>

@functions {

    private string GetSocialIcon(string platform)
    {
        return platform.ToLower() switch
        {
            "linkedin" => "linkedin",
            "twitter" => "twitter-x",
            "github" => "github",
            "website" => "globe",
            "blog" => "journal-text",
            "youtube" => "youtube",
            "mastodon" => "mastodon",
            _ => "link-45deg"
        };
    }

    private string GetPageUrl(int page)
    {
        var queryParams = new List<string> { $"CurrentPage={page}" };

        if (!string.IsNullOrEmpty(Model.SearchTerm))
            queryParams.Add($"SearchTerm={Uri.EscapeDataString(Model.SearchTerm)}");

        if (Model.SpeakerTypeFilter.HasValue)
            queryParams.Add($"SpeakerTypeFilter={Model.SpeakerTypeFilter}");

        if (Model.ExpertiseFilter.HasValue)
            queryParams.Add($"ExpertiseFilter={Model.ExpertiseFilter}");

        if (!string.IsNullOrEmpty(Model.SortBy))
            queryParams.Add($"SortBy={Model.SortBy}");

        return $"/BrowseSpeakers?{string.Join("&", queryParams)}";
    }

}

@section Scripts {

}